{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KotOnm504AY8"
      },
      "outputs": [],
      "source": [
        "# Instalamos Spark para Python\n",
        "!pip install pyspark\n",
        "\n",
        "import os\n",
        "\n",
        "# Instalamos Java SDK 8\n",
        "!apt-get install -y openjdk-8-jdk -qq > /dev/null\n",
        "!echo $(/usr/libexec/java_home -v 1.8)\n",
        "\n",
        "#set environment variable\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n",
        "!echo 2 | update-alternatives --config java"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark import SparkContext\n",
        "sc = SparkContext(\"local\", \"Prueba\")\n",
        "\n",
        "root_path = '/content/'"
      ],
      "metadata": {
        "id": "xVqQJ9FC4JxH"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clientes = sc.textFile(root_path + \"Clientes.txt\")\n",
        "clientes = clientes.map(lambda line: line.split(\"\\t\"))\n",
        "clientes = clientes.map(lambda t: (int(t[0]), t[1] + \" \" + t[2], int(t[3]), t[4], t[5]))\n",
        "print(clientes.count())"
      ],
      "metadata": {
        "id": "bm1u1V1P55wW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clienITA = clientes.filter(lambda t: t[4] == \"ESP\")\n",
        "print(clienITA.first())"
      ],
      "metadata": {
        "id": "Xgwg4hn2RBS0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clienMayores = clientes.filter(lambda t : int(t[3][0:4]) < 1960)\n",
        "cliens = clienITA.union(clienMayores)\n",
        "cliens = cliens.distinct()\n",
        "cliens = cliens.map(lambda t : (t[1], t[2]))\n",
        "print(cliens.take(5))"
      ],
      "metadata": {
        "id": "y98pbaFxRCyb"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}