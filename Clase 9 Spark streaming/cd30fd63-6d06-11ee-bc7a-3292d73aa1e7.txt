{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "il2wKA8wEWu7"
      },
      "outputs": [],
      "source": [
        "# Instalamos Spark para Python\n",
        "!pip install pyspark\n",
        "\n",
        "# Instalamos Java SDK 8\n",
        "import os, sys\n",
        "\n",
        "# !apt-get install -y openjdk-8-jdk-headless -qq > /dev/null      #install openjdk\n",
        "# !apt-get update\n",
        "!apt-get install -y openjdk-8-jdk -qq > /dev/null      #install openjdk\n",
        "!echo $(/usr/libexec/java_home -v 1.8)\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"     #set environment variable\n",
        "!echo 2 | update-alternatives --config java\n",
        "!java -version       #check java version"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "root_path = '/content/input/'\n",
        "\n",
        "# Creamos el contexto de Spark\n",
        "from pyspark import SparkContext\n",
        "sc = SparkContext(\"local\", \"Prueba\")\n",
        "\n",
        "from pyspark.streaming import StreamingContext\n",
        "ssc = StreamingContext(sc, 10)\n",
        "\n",
        "ssc.checkpoint(\"buffer\")"
      ],
      "metadata": {
        "id": "pwhghNY8QVE6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "streamOriginal = ssc.textFileStream(root_path)\n",
        "stream = streamOriginal.flatMap(lambda t: t.split(\" \"))\n",
        "stream = stream.map(lambda t: (t, 1))\n",
        "stream = stream.reduceByKey(lambda t1, t2: t1+t2)\n",
        "stream.pprint()\n",
        "\n",
        "def fUpdate(newValues, history):\n",
        "\tif(history == None):\n",
        "\t\thistory = 0\n",
        "\tif(newValues == None):\n",
        "\t\tnewValues = 0\n",
        "\telse:\n",
        "\t\tnewValues = sum(newValues)\n",
        "\treturn newValues + history\n",
        "\n",
        "history = stream.updateStateByKey(fUpdate)\n",
        "history.pprint()\n",
        "\n"
      ],
      "metadata": {
        "id": "lk-Dy5azEnYq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ssc.start()\n",
        "ssc.awaitTermination()"
      ],
      "metadata": {
        "id": "XsHTFpFEEsbj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}